//
//  Secret.swift
//  ExchangeRateCalculator
//
//  Created by 마석우 on 1/29/24.
//

import UIKit
import CryptoKit

struct Secret {
    // 싱글톤으로 접근
    static var shared: Secret = Secret()
    
    // uuidgen으로 생성된 값 66F123AC-D948-4C2B-B711-72E15E8E3A28 난독화
    var sharedSecretData: Data {
        return Data([0x77,0x46,0x36,0x75,0x57,0x5F,0x24,0x24,0x4C,0x30,0x5C,0x7A,0x6B,0x62,0x56,0x29,0x57,0x21,0x59,0x03,0x47,0x41,0x75,0x48,0x5B,0x57,0x22,0x50,0x41,0x20,0x76,0x16,0x7C,0x23,0x58,0x5D]
        )
    }
    
    // uuidgen으로 생성된 값 94878761-302A-43F1-BC1B-4750CAB8B4C8 난독화
    var passwordData: Data {
        return Data( [0x78,0x44,0x48,0x73,0x5D,0x5B,0x53,0x56,0x4C,0x47,0x55,0x7C,0x12,0x62,0x56,0x59,0x23,0x52,0x59,0x03,0x33,0x41,0x06,0x48,0x58,0x52,0x52,0x51,0x37,0x24,0x0C,0x6B,0x0D,0x56,0x29,0x5D]
        )
    }
    // secretData와 passwordData를 숨겨야 함. 파일 난독화를 통해 해야 하는 거 같다.
    
    var aesKey: SymmetricKey {
        return HKDF<SHA512>.deriveKey(inputKeyMaterial: SymmetricKey(data: passwordData), info: sharedSecretData, outputByteCount: 32)
    }
    
    let apiCipherText: [UInt8] = [0x63,0x90,0xC5,0xB0,0x55,0xC7,0x96,0x7F,0x81,0xA0,0x54,0xB3,0x8A,0x38,0xCB,0x38,0xA2,0xCA,0x34,0xD5,0xBE,0xCD,0x2B,0xF9,0x61,0x98,0xD6,0x09,0x57,0x70,0x1E,0xDF,0x1A,0x9B,0xA8,0x45,0x7E,0x5B,0x3D,0x71,0x86,0x86,0x5A,0x86,0x3F,0x24,0x79,0xEF,0x2A,0x27,0xDC,0x91,0xC5,0x38,0x64,0xA4,0xDD,0x0C,0x2E,0xC5]
    
    var apiKey: String {
        let sealedBox = try! AES.GCM.SealedBox(combined: apiCipherText)
        let apiKeyData = try! AES.GCM.open(sealedBox, using: aesKey)
        
        return String(data: apiKeyData, encoding: .utf8)!
    }
}

/* 전체적인 암호화 복호화 과정
let obfuscator = Obfuscator()
        let passwordData = Data( [0x78,0x44,0x48,0x73,0x5D,0x5B,0x53,0x56,0x4C,0x47,0x55,0x7C,0x12,0x62,0x56,0x59,0x23,0x52,0x59,0x03,0x33,0x41,0x06,0x48,0x58,0x52,0x52,0x51,0x37,0x24,0x0C,0x6B,0x0D,0x56,0x29,0x5D])
        let sharedSecretData = Data([0x77,0x46,0x36,0x75,0x57,0x5F,0x24,0x24,0x4C,0x30,0x5C,0x7A,0x6B,0x62,0x56,0x29,0x57,0x21,0x59,0x03,0x47,0x41,0x75,0x48,0x5B,0x57,0x22,0x50,0x41,0x20,0x76,0x16,0x7C,0x23,0x58,0x5D])


        let aesKey = HKDF<SHA512>.deriveKey(inputKeyMaterial: SymmetricKey(data: passwordData), info: sharedSecretData, outputByteCount: 32)

        let apiKey = "c93c20968ed6f9adfe0cfd65341593c7".data(using: .utf8)!
        var sealedBox = try! AES.GCM.seal(apiKey, using: aesKey)
        let apiCipher = sealedBox.combined!

        print(apiCipher.map { String(format: "0x%02X", $0) }.joined(separator: ","))
        sealedBox = try! AES.GCM.SealedBox(combined: apiCipher)
        let api = try! AES.GCM.open(sealedBox, using: aesKey)

*/
